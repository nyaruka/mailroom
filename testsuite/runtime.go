package testsuite

import (
	"context"
	"fmt"
	"log/slog"
	"maps"
	"os"
	"os/exec"
	"path"
	"testing"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/nyaruka/gocommon/aws/dynamo/dyntest"
	"github.com/nyaruka/mailroom/core/models"
	"github.com/nyaruka/mailroom/runtime"
	"github.com/nyaruka/rp-indexer/v10/indexers"
	ixruntime "github.com/nyaruka/rp-indexer/v10/runtime"
	"github.com/stretchr/testify/require"
)

const (
	elasticURL            = "http://localhost:9200"
	elasticContactsIndex  = "test_contacts"
	postgresContainerName = "textit-postgres-1"
	postgresDumpPath      = "./testsuite/testdata/postgres.dump"
	dynamoTablesPath      = "./testsuite/testdata/dynamo.json"
)

// Refresh is our type for the pieces of org assets we want fresh (not cached)
type ResetFlag int

// refresh bit masks
const (
	ResetNone    = ResetFlag(0)
	ResetAll     = ResetFlag(^0)
	ResetDB      = ResetFlag(1 << 1)
	ResetData    = ResetFlag(1 << 2)
	ResetValkey  = ResetFlag(1 << 3)
	ResetStorage = ResetFlag(1 << 4)
	ResetElastic = ResetFlag(1 << 5)
	ResetDynamo  = ResetFlag(1 << 6)
)

// Reset clears out both our database and redis DB
func Reset(t *testing.T, rt *runtime.Runtime, what ResetFlag) {
	if what&ResetValkey > 0 {
		resetValkey(t, rt)
	}
	if what&ResetStorage > 0 {
		resetStorage(t, rt)
	}
	if what&ResetElastic > 0 {
		resetElastic(t, rt)
	}
	if what&ResetDynamo > 0 {
		resetDynamo(t, rt)
	}

	if what&ResetDB > 0 {
		resetDB(t, rt)
	} else if what&ResetData > 0 {
		resetData(t, rt)
	}

	models.FlushCache()
}

// Runtime returns the various runtime things a test might need
func Runtime(t *testing.T) (context.Context, *runtime.Runtime) {
	cfg := runtime.NewDefaultConfig()
	cfg.DeploymentID = "test"
	cfg.Port = 8091
	cfg.DB = "postgres://mailroom_test:temba@localhost/mailroom_test?sslmode=disable&Timezone=UTC"
	cfg.ElasticContactsIndex = elasticContactsIndex
	cfg.Elastic = elasticURL
	cfg.AWSAccessKeyID = "root"
	cfg.AWSSecretAccessKey = "tembatemba"
	cfg.S3Endpoint = "http://localhost:9000"
	cfg.S3AttachmentsBucket = "test-attachments"
	cfg.S3SessionsBucket = "test-sessions"
	cfg.S3Minio = true
	cfg.DynamoEndpoint = "http://localhost:6000"
	cfg.DynamoTablePrefix = "Test"
	cfg.SpoolDir = absPath("./_test_spool")

	err := cfg.Parse()
	require.NoError(t, err)

	rt, err := runtime.NewRuntime(cfg)
	require.NoError(t, err)

	createBucket(t, rt, rt.Config.S3AttachmentsBucket)
	createBucket(t, rt, rt.Config.S3SessionsBucket)

	// create Postgres tables if necessary
	_, err = rt.DB.Exec("SELECT * from orgs_org")
	if err != nil {
		loadTestDump(t)

		// force re-connection
		rt, err = runtime.NewRuntime(cfg)
		require.NoError(t, err)
	}

	// create Dynamo tables if necessary
	dyntest.CreateTables(t, rt.Dynamo, absPath(dynamoTablesPath), false)

	rt.FCM = &MockFCMClient{ValidTokens: []string{"FCMID3", "FCMID4", "FCMID5"}}

	slog.SetDefault(slog.New(slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{Level: slog.LevelInfo})))

	err = rt.Start()
	require.NoError(t, err, "error starting runtime")

	t.Cleanup(func() {
		rt.Stop()

		rt.DB.Close()
		rt.VK.Close()
	})

	return t.Context(), rt
}

// reindexes data changes to Elastic
func ReindexElastic(t *testing.T, rt *runtime.Runtime) {
	t.Helper()

	contactsIndexer := indexers.NewContactIndexer(elasticURL, elasticContactsIndex, 1, 1, 100)
	_, err := contactsIndexer.Index(&ixruntime.Runtime{DB: rt.DB.DB}, false, false)
	require.NoError(t, err)

	_, err = rt.ES.Indices.Refresh().Index(elasticContactsIndex).Do(t.Context())
	require.NoError(t, err)
}

// resets our database to our base state from our RapidPro dump
//
// mailroom_test.dump can be regenerated by running:
//
//	% python manage.py mailroom_db
//
// then copying the mailroom_test.dump file to your mailroom root directory
//
//	% cp mailroom_test.dump ../mailroom
func resetDB(t *testing.T, rt *runtime.Runtime) {
	t.Helper()

	rt.DB.MustExec("DROP OWNED BY mailroom_test CASCADE")

	loadTestDump(t)
}

func loadTestDump(t *testing.T) {
	t.Helper()

	dump, err := os.Open(absPath(postgresDumpPath))
	require.NoError(t, err)

	defer dump.Close()

	cmd := exec.Command("docker", "exec", "-i", postgresContainerName, "pg_restore", "-d", "mailroom_test", "-U", "mailroom_test")
	cmd.Stdin = dump

	output, err := cmd.CombinedOutput()
	if err != nil {
		panic(fmt.Sprintf("error restoring database: %s: %s", err, string(output)))
	}
}

// Converts a project root relative path to an absolute path usable in any test. This is needed because go tests
// are run with a working directory set to the current module being tested.
func absPath(p string) string {
	// start in working directory and go up until we are in a directory containing go.mod
	dir, _ := os.Getwd()
	for dir != "/" {
		if _, err := os.Stat(path.Join(dir, "go.mod")); err == nil {
			break
		}
		dir = path.Dir(dir)
	}
	return path.Join(dir, p)
}

// resets our valkey database
func resetValkey(t *testing.T, rt *runtime.Runtime) {
	t.Helper()

	vc := rt.VK.Get()
	defer vc.Close()

	_, err := vc.Do("FLUSHDB")
	require.NoError(t, err, "error flushing valkey db")
}

func resetStorage(t *testing.T, rt *runtime.Runtime) {
	t.Helper()

	err := rt.S3.EmptyBucket(t.Context(), rt.Config.S3AttachmentsBucket)
	require.NoError(t, err)

	err = rt.S3.EmptyBucket(t.Context(), rt.Config.S3SessionsBucket)
	require.NoError(t, err)
}

func createBucket(t *testing.T, rt *runtime.Runtime, bucket string) {
	t.Helper()

	err := rt.S3.Test(t.Context(), bucket)
	if err != nil {
		_, err = rt.S3.Client.CreateBucket(t.Context(), &s3.CreateBucketInput{Bucket: aws.String(bucket)})
		require.NoError(t, err)
	}
}

// clears indexed data in Elastic
func resetElastic(t *testing.T, rt *runtime.Runtime) {
	t.Helper()

	exists, err := rt.ES.Indices.ExistsAlias(elasticContactsIndex).Do(t.Context())
	require.NoError(t, err)

	if exists {
		// get any indexes for the contacts alias
		ar, err := rt.ES.Indices.GetAlias().Name(elasticContactsIndex).Do(t.Context())
		require.NoError(t, err)

		// and delete them
		for index := range maps.Keys(ar) {
			_, err := rt.ES.Indices.Delete(index).Do(t.Context())
			require.NoError(t, err)
		}
	}

	ReindexElastic(t, rt)
}

func resetDynamo(t *testing.T, rt *runtime.Runtime) {
	t.Helper()

	rt.Writers.Main.Flush()
	rt.Writers.History.Flush()

	dyntest.CreateTables(t, rt.Dynamo, absPath(dynamoTablesPath), true)
}

var sqlResetTestData = `
UPDATE contacts_contact SET last_seen_on = NULL, current_session_uuid = NULL, current_flow_id = NULL;

DELETE FROM api_resthooksubscriber WHERE resthook_id >= 30000;
DELETE FROM api_resthook WHERE id >= 30000;
DELETE FROM notifications_notification;
DELETE FROM notifications_incident;
DELETE FROM request_logs_httplog;
DELETE FROM tickets_ticketevent;
DELETE FROM tickets_ticket;
DELETE FROM triggers_trigger_contacts WHERE trigger_id >= 30000;
DELETE FROM triggers_trigger_groups WHERE trigger_id >= 30000;
DELETE FROM triggers_trigger_exclude_groups WHERE trigger_id >= 30000;
DELETE FROM triggers_trigger WHERE id >= 30000;
DELETE FROM channels_channel WHERE id >= 30000;
DELETE FROM channels_channelcount;
DELETE FROM channels_channelevent;
DELETE FROM msgs_msg;
DELETE FROM flows_flowrun;
DELETE FROM flows_flowactivitycount;
DELETE FROM flows_flowresultcount;
DELETE FROM flows_flowstartcount;
DELETE FROM flows_flowstart_contacts;
DELETE FROM flows_flowstart_groups;
DELETE FROM flows_flowstart;
DELETE FROM flows_flowsession;
DELETE FROM flows_flowrevision WHERE flow_id >= 30000;
DELETE FROM flows_flow WHERE id >= 30000;
DELETE FROM ai_llm WHERE id >= 30000;
DELETE FROM ivr_call;
DELETE FROM msgs_msg_labels;
DELETE FROM msgs_msg;
DELETE FROM msgs_broadcast_groups;
DELETE FROM msgs_broadcast_contacts;
DELETE FROM msgs_broadcastmsgcount;
DELETE FROM msgs_broadcast;
DELETE FROM msgs_optin;
DELETE FROM templates_templatetranslation WHERE id >= 30000;
DELETE FROM templates_template WHERE id >= 30000;
DELETE FROM schedules_schedule;
DELETE FROM campaigns_campaignevent WHERE id >= 30000;
DELETE FROM campaigns_campaign WHERE id >= 30000;
DELETE FROM contacts_contactfire;
DELETE FROM contacts_contactimportbatch;
DELETE FROM contacts_contactimport;
DELETE FROM contacts_contacturn WHERE id >= 30000;
DELETE FROM contacts_contactgroup_contacts WHERE id >= 30000;
DELETE FROM contacts_contact WHERE id >= 30000;
DELETE FROM contacts_contactgroupcount WHERE group_id >= 30000;
DELETE FROM contacts_contactgroup WHERE id >= 30000;
DELETE FROM orgs_itemcount;
DELETE FROM orgs_dailycount;

ALTER SEQUENCE ai_llm_id_seq RESTART WITH 30000;
ALTER SEQUENCE api_resthook_id_seq RESTART WITH 30000;
ALTER SEQUENCE api_resthooksubscriber_id_seq RESTART WITH 30000;
ALTER SEQUENCE flows_flow_id_seq RESTART WITH 30000;
ALTER SEQUENCE tickets_ticket_id_seq RESTART WITH 30000;
ALTER SEQUENCE channels_channelevent_id_seq RESTART WITH 30000;
ALTER SEQUENCE msgs_msg_id_seq RESTART WITH 30000;
ALTER SEQUENCE msgs_broadcast_id_seq RESTART WITH 30000;
ALTER SEQUENCE flows_flowrun_id_seq RESTART WITH 30000;
ALTER SEQUENCE flows_flowstart_id_seq RESTART WITH 30000;
ALTER SEQUENCE flows_flowsession_id_seq RESTART WITH 30000;
ALTER SEQUENCE contacts_contact_id_seq RESTART WITH 30000;
ALTER SEQUENCE contacts_contacturn_id_seq RESTART WITH 30000;
ALTER SEQUENCE contacts_contactfield_id_seq RESTART WITH 30000;
ALTER SEQUENCE contacts_contactgroup_id_seq RESTART WITH 30000;
ALTER SEQUENCE contacts_contactgroup_contacts_id_seq RESTART WITH 30000;
ALTER SEQUENCE contacts_contactimport_id_seq RESTART WITH 30000;
ALTER SEQUENCE contacts_contactimportbatch_id_seq RESTART WITH 30000;
ALTER SEQUENCE campaigns_campaign_id_seq RESTART WITH 30000;
ALTER SEQUENCE campaigns_campaignevent_id_seq RESTART WITH 30000;`

// removes contact data not in the test database dump. Note that this function can't
// undo changes made to the contact data in the test database dump.
func resetData(t *testing.T, rt *runtime.Runtime) {
	t.Helper()

	rt.DB.MustExec(sqlResetTestData)
}

func ReadFile(t *testing.T, path string) []byte {
	t.Helper()

	d, err := os.ReadFile(path)
	require.NoError(t, err)
	return d
}
