package flow

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/nyaruka/goflow/flows"
	"github.com/nyaruka/mailroom/core/goflow"
	"github.com/nyaruka/mailroom/core/models"
	"github.com/nyaruka/mailroom/runtime"
	"github.com/nyaruka/mailroom/web"
)

func init() {
	web.RegisterRoute(http.MethodPost, "/mr/flow/inspect", web.RequireAuthToken(web.JSONPayload(handleInspect)))
}

// Inspects a flow, and returns metadata including the possible results generated by the flow,
// and dependencies in the flow. If `org_id` is specified then the dependencies will be checked
// to see if they exist in the org assets.
//
//	{
//	  "flow": { "uuid": "468621a8-32e6-4cd2-afc1-04416f7151f0", "nodes": [...]},
//	  "org_id": 1
//	}
type inspectRequest struct {
	Flow  json.RawMessage `json:"flow" validate:"required"`
	OrgID models.OrgID    `json:"org_id"`
}

func handleInspect(ctx context.Context, rt *runtime.Runtime, r *inspectRequest) (any, int, error) {
	flow, err := goflow.ReadFlow(rt.Config, r.Flow)
	if err != nil {
		return nil, 0, fmt.Errorf("unable to read flow: %w", err)
	}

	var sa flows.SessionAssets
	// if we have an org ID, create session assets to look for missing dependencies
	if r.OrgID != models.NilOrgID {
		oa, err := models.GetOrgAssetsWithRefresh(ctx, rt, r.OrgID, models.RefreshFields|models.RefreshGroups|models.RefreshFlows|models.RefreshGlobals|models.RefreshLabels|models.RefreshOptIns|models.RefreshTopics)
		if err != nil {
			return nil, 0, err
		}
		sa = oa.SessionAssets()
	}

	return flow.Inspect(sa), http.StatusOK, nil
}
